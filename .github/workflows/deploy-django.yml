name: "Deploy Django App"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true 
        options:
          - production
        type: choice 

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}


jobs: 
  deploy-django:
    name: "Deploy Django"
    runs-on: ubuntu-latest

    steps:
     # checkout the repo to Github Actions runner
    - name: Checkout 
      uses: actions/checkout@v2 

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with: 
        python-version: 3.9

    - name: Install dependencies 
      run: |
        cd django-api
        python -m pip install --upgrade pip 
        pip install -t requirements.txt 

    - name: Lint with flake8
      run:  |
        cd django-api
        pip install flake8
        flake8  

    - name: Django Testing 
      run: |
        cd django-api
        python3 manage.py test 
 
    - name: Configure AWS Credentials
    - uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPO }} 
        IMAGE_TAG: ${{ github.sha }}
        DB_HOST: ${{ secrets.PGSQL_HOST }} 
        DB_USER: ${{ secrets.PGSQL_USER }} 
        DB_PASSWORD: ${{ secrets.PGSQL_PASSWORD }} 
        JWT_KEY: ${{ secrets.JWT_KEY }} 
      run: |
        cd django-api
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
