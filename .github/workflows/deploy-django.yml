name: "Deploy Django App"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true 
        options:
          - production
        type: choice 

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}


jobs: 
  deploy-django:
    name: "Deploy Django"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash 

    steps:
     # checkout the repo to Github Actions runner
    - name: Checkout 
      uses: actions/checkout@v2 

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with: 
        python-version: 3.9

    - name: Install dependencies 
      id: install-dependencies
      run: |
        cd django-api
        python -m pip install --upgrade pip 
        pip install -r requirements.txt 

    # - name: Lint with flake8
    #   id: lint
    #   run:  |
    #     cd django-api
    #     pip install flake8
    #     flake8  

    - name: Django Testing 
      id: testing
      run: |
        cd django-api
        python3 manage.py test 
 
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Django image to Amazon ECR
      id: build-django
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPO }} 
        IMAGE_TAG: ${{ github.sha }}
      
      run: |
        cd django-api
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:Django-$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:Django-$IMAGE_TAG


    - name: Build, tag, and push NGINX image to Amazon ECR
      id: build-nginx
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPO }} 
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd django-api
        cd nginx
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:Nginx-$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:Nginx-$IMAGE_TAG

    - name: Get .env variables from Secret Manager
      run: |
          cd django-api
          aws secretsmanager get-secret-value --secret-id ${{secrets.PORTFOLIO_DB_SECRET}} --region ${{secrets.AWS_REGION}} | \
            jq -r '.SecretString' | \
            jq -r "to_entries|map(\"\(.key)=\\\"\(.value|tostring)\\\"\")|.[]" > .env

    - name: Setup EC2 Login credentials
      uses: shimataro/ssh-key-action@v2
      with: 
        known_hosts: ${{secrets.EC2_HOSTNAME}}
        # name: ${{secrets.SSH_KEY_NAME}}
        key: ${{secrets.SSH_PRIVATEKEY_NAME}}

    - name: Adding Known Hosts 
      run: ssh-keyscan - H ${{ secrets.EC2_HOSTNAME }} >> ~/.ssh/known_hosts
    
    - name: Pull Docker Images to EC2
      run: | 
        ssh -o StrictHostKeyChecking=no -i ${{secrets.SSH_PRIVATEKEY_NAME}} ${{secrets.EC2_USERNAME}}@${{secrets.EC2_HOSTNAME}}
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:Django-$IMAGE_TAG
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:Nginx-$IMAGE_TAG
        docker network create portfolio
        docker run --name api --network portfolio $ECR_REGISTRY/$ECR_REPOSITORY:Django-$IMAGE_TAG
        docker run -p 8080:80 --name nginx --network portfolio $ECR_REGISTRY/$ECR_REPOSITORY:Nginx-$IMAGE_TAG

        
